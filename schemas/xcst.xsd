<?xml version="1.0" encoding="UTF-8"?>
<!-- Converted from Relax NG schema, using Trang. Use only with code completion tools that do not support Relax NG. -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:c="http://maxtoroq.github.io/XCST" elementFormDefault="qualified" targetNamespace="http://maxtoroq.github.io/XCST">
   <xs:group name="declaration">
      <xs:choice>
         <xs:element ref="c:attribute-set"/>
         <xs:element ref="c:function"/>
         <xs:element ref="c:import"/>
         <xs:element ref="c:output"/>
         <xs:element ref="c:param"/>
         <xs:element ref="c:template"/>
         <xs:element ref="c:type"/>
         <xs:element ref="c:use-package"/>
         <xs:element ref="c:validation"/>
         <xs:element ref="c:variable"/>
      </xs:choice>
   </xs:group>
   <xs:group name="instruction">
      <xs:choice>
         <xs:element ref="c:assert"/>
         <xs:element ref="c:attribute"/>
         <xs:element ref="c:break"/>
         <xs:element ref="c:call-template"/>
         <xs:element ref="c:choose"/>
         <xs:element ref="c:comment"/>
         <xs:element ref="c:continue"/>
         <xs:element ref="c:delegate"/>
         <xs:element ref="c:element"/>
         <xs:element ref="c:evaluate-delegate"/>
         <xs:element ref="c:evaluate-package"/>
         <xs:element ref="c:fallback"/>
         <xs:element ref="c:for-each"/>
         <xs:element ref="c:for-each-group"/>
         <xs:element ref="c:if"/>
         <xs:element ref="c:message"/>
         <xs:element ref="c:namespace"/>
         <xs:element ref="c:next-function"/>
         <xs:element ref="c:next-template"/>
         <xs:element ref="c:object"/>
         <xs:element ref="c:processing-instruction"/>
         <xs:element ref="c:result-document"/>
         <xs:element ref="c:return"/>
         <xs:element ref="c:script"/>
         <xs:element ref="c:serialize"/>
         <xs:element ref="c:set"/>
         <xs:element ref="c:text"/>
         <xs:element ref="c:try"/>
         <xs:element ref="c:using"/>
         <xs:element ref="c:value-of"/>
         <xs:element ref="c:variable"/>
         <xs:element ref="c:void"/>
         <xs:element ref="c:while"/>
      </xs:choice>
   </xs:group>
   <xs:attributeGroup name="standard-attributes">
      <xs:attributeGroup ref="c:standard-attributes-except-version"/>
      <xs:attribute name="version" type="c:Version">
         <xs:annotation>
            <xs:documentation>The XCST version for the current and descendant elements (usually "1.0").</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:attributeGroup name="standard-attributes-except-version">
      <xs:attribute name="expand-text" type="c:Boolean">
         <xs:annotation>
            <xs:documentation>Enables or disables text value templates for descendant text nodes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="extension-element-prefixes" type="c:ExtensionElementPrefixes">
         <xs:annotation>
            <xs:documentation>Designates namespaces as extension namespaces.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transform-text" type="c:TransformText">
         <xs:annotation>
            <xs:documentation>Enables or disables text normalization for descendant text nodes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:group name="literal-result-element">
      <xs:choice>
         <xs:any namespace="##other" processContents="lax"/>
         <xs:any namespace="##local" processContents="lax"/>
      </xs:choice>
   </xs:group>
   <xs:attributeGroup name="literal-result-element-attributes-except-version">
      <xs:attribute name="expand-text" form="qualified" type="c:Boolean"/>
      <xs:attribute name="extension-element-prefixes" form="qualified" type="c:ExtensionElementPrefixes"/>
      <xs:attribute name="transform-text" form="qualified" type="c:TransformText"/>
      <xs:attribute name="use-attribute-sets" form="qualified" type="c:UseAttributeSets"/>
      <xs:anyAttribute processContents="skip"/>
   </xs:attributeGroup>
   <xs:group name="sequence-constructor">
      <xs:sequence>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="c:instruction"/>
            <xs:group ref="c:literal-result-element"/>
         </xs:choice>
      </xs:sequence>
   </xs:group>
   <xs:attributeGroup name="visibility-attribute">
      <xs:attribute name="visibility" type="c:Visibility">
         <xs:annotation>
            <xs:documentation>Specifies how the current component can be used in other (using) packages.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:group name="user-defined-data-element">
      <xs:sequence>
         <xs:any namespace="##other" processContents="lax"/>
      </xs:sequence>
   </xs:group>
   <xs:group name="any-nodes">
      <xs:sequence>
         <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
      </xs:sequence>
   </xs:group>
   <xs:attributeGroup name="any-nodes">
      <xs:anyAttribute processContents="skip"/>
   </xs:attributeGroup>
   <xs:group name="simplified-module">
      <xs:choice>
         <xs:any namespace="##other" processContents="lax"/>
         <xs:any namespace="##local" processContents="lax"/>
      </xs:choice>
   </xs:group>
   <xs:element name="module" type="c:module-content">
      <xs:annotation>
         <xs:documentation>Represents an XCST module.</xs:documentation>
      </xs:annotation>
   </xs:element>
   <xs:element name="package">
      <xs:annotation>
         <xs:documentation>Represents an XCST package.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:complexContent>
            <xs:extension base="c:module-content">
               <xs:attribute name="name" type="c:Name">
                  <xs:annotation>
                     <xs:documentation>The fully-qualified class name for the current package.</xs:documentation>
                  </xs:annotation>
               </xs:attribute>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>
   </xs:element>
   <xs:complexType name="module-content">
      <xs:sequence>
         <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:use-functions"/>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="c:declaration"/>
            <xs:group ref="c:user-defined-data-element"/>
         </xs:choice>
      </xs:sequence>
      <xs:attribute name="version" use="required" type="c:Version">
         <xs:annotation>
            <xs:documentation>The XCST version for the current and descendant elements (usually "1.0").</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="language" use="required" type="c:Language">
         <xs:annotation>
            <xs:documentation>The expression language for this module (usually "C#").</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:standard-attributes-except-version"/>
   </xs:complexType>
   <xs:element name="use-functions">
      <xs:annotation>
         <xs:documentation>Imports functions from a function library.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="in" use="required" type="c:Type">
            <xs:annotation>
               <xs:documentation>The namespace or fully-qualified class name to import functions from.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alias" type="c:Name">
            <xs:annotation>
               <xs:documentation>A name to use as prefix for imported functions.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="static-only" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to import static functions only. The in attribute must refer to a class.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="use-package">
      <xs:annotation>
         <xs:documentation>Specifies a package dependency.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:override"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The class name of the package to use. Must be a fully-qualified name when using from implicit or unnamed packages.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="override">
      <xs:annotation>
         <xs:documentation>Container element for overriding components.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="c:template"/>
            <xs:element ref="c:function"/>
            <xs:element ref="c:variable"/>
            <xs:element ref="c:param"/>
            <xs:element ref="c:attribute-set"/>
            <xs:element ref="c:type"/>
         </xs:choice>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="import">
      <xs:annotation>
         <xs:documentation>Specifies a module dependency.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="href" use="required" type="c:URI">
            <xs:annotation>
               <xs:documentation>The relative or absolute URI of the module to import.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="template">
      <xs:annotation>
         <xs:documentation>Defines a template.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:param"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:EQName">
            <xs:annotation>
               <xs:documentation>The name of the template.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="function">
      <xs:annotation>
         <xs:documentation>Defines a function.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:param"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the function.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The return type. Omit this attribute for void functions.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="param">
      <xs:annotation>
         <xs:documentation>Defines a package, template, function or delegate parameter.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The default value of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the parameter is required.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the parameter is a tunnel parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="attribute-set">
      <xs:annotation>
         <xs:documentation>Defines an attribute set.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:attribute"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:EQName">
            <xs:annotation>
               <xs:documentation>The name of the attribute set.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="use-attribute-sets" type="c:UseAttributeSets">
            <xs:annotation>
               <xs:documentation>Specifies other attribute sets to use before the current one.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="type">
      <xs:annotation>
         <xs:documentation>Defines a type.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:metadata"/>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:member"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:type-or-member-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="member">
      <xs:annotation>
         <xs:documentation>Defines a type member.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:metadata"/>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:member"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An initial value for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expression" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An expression for computed members.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="auto-initialize" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Auto-assign an initial value to this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="display">
            <xs:annotation>
               <xs:documentation>Specifies if this member should be displayed in a UI.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:Boolean">
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="view-only">
                           <xs:annotation>
                              <xs:documentation>Indicates that this member should only be displayed in a viewing UI.</xs:documentation>
                           </xs:annotation>
                        </xs:enumeration>
                     </xs:restriction>
                  </xs:simpleType>
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="edit-only">
                           <xs:annotation>
                              <xs:documentation>Indicates that this member should only be displayed in an editing UI.</xs:documentation>
                           </xs:annotation>
                        </xs:enumeration>
                     </xs:restriction>
                  </xs:simpleType>
               </xs:union>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="display-name" type="c:String">
            <xs:annotation>
               <xs:documentation>A name suitable for UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="description" type="c:String">
            <xs:annotation>
               <xs:documentation>A description of this member suitable for UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="short-name" type="c:String">
            <xs:annotation>
               <xs:documentation>A shorter name suitable for UI where the display name would be too long to fit (e.g. a table column).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="place-holder" type="c:String">
            <xs:annotation>
               <xs:documentation>A hint to the user of what can be entered in a control for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="order" type="c:Integer">
            <xs:annotation>
               <xs:documentation>A number that indicates the relative position of this member in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group" type="c:String">
            <xs:annotation>
               <xs:documentation>A name that is used to group members in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="format" type="c:String">
            <xs:annotation>
               <xs:documentation>A formatting string that specifies the display format for the value of this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="apply-format-in-edit-mode" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the display format should be used in an edit control for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disable-output-escaping" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if this member should not be escaped when displaying in a UI (e.g. HTML content).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="null-display-text" type="c:String">
            <xs:annotation>
               <xs:documentation>A text that is displayed for this member when the value is null.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="template" type="c:String">
            <xs:annotation>
               <xs:documentation>The name of a template to use when displaying this member in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="read-only" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if editing should be disabled for this member in an editing UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="auto-generate-filter" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if a filtering control should be automatically displayed for this member in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="data-type">
            <xs:simpleType>
               <xs:restriction base="xs:token">
                  <xs:enumeration value="CreditCard"/>
                  <xs:enumeration value="Currency"/>
                  <xs:enumeration value="Date"/>
                  <xs:enumeration value="DateTime"/>
                  <xs:enumeration value="Duration"/>
                  <xs:enumeration value="EmailAddress"/>
                  <xs:enumeration value="Html"/>
                  <xs:enumeration value="ImageUrl"/>
                  <xs:enumeration value="MultilineText"/>
                  <xs:enumeration value="Password"/>
                  <xs:enumeration value="PhoneNumber"/>
                  <xs:enumeration value="PostalCode"/>
                  <xs:enumeration value="Text"/>
                  <xs:enumeration value="Time"/>
                  <xs:enumeration value="Upload"/>
                  <xs:enumeration value="Url"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="required" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if this member is required.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="max-length" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A maximum valid string length for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="min-length" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A minimum valid string length for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pattern" type="c:String">
            <xs:annotation>
               <xs:documentation>A regular expression that a valid value for this member must conform to.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="min" type="c:String">
            <xs:annotation>
               <xs:documentation>A minimum valid value for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="max" type="c:String">
            <xs:annotation>
               <xs:documentation>A maximum valid value for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="equal-to" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of another member that a valid value for this member should be equal to.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:type-or-member-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="metadata">
      <xs:annotation>
         <xs:documentation>Defines type or member custom metadata.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="value" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The metadata expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:attributeGroup name="type-or-member-attributes">
      <xs:attribute name="resource-type" type="c:Type">
         <xs:annotation>
            <xs:documentation>A type that contains resources for name, short-name, description and placeholder attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disable-empty-string-to-null-conversion" type="c:Boolean">
         <xs:annotation>
            <xs:documentation>Specifies if empty strings should not be converted to null for this member.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="allow-empty-string" type="c:Boolean">
         <xs:annotation>
            <xs:documentation>Specifies if an empty string is a valid value for this member.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="display-text-member" type="c:Name">
         <xs:annotation>
            <xs:documentation>The name of the member to use as the text representation for this type.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:validation-attributes"/>
   </xs:attributeGroup>
   <xs:element name="output">
      <xs:annotation>
         <xs:documentation>Defines serialization parameters.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" type="c:EQName">
            <xs:annotation>
               <xs:documentation>The name of the output definition.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="method" type="c:OutputMethod">
            <xs:annotation>
               <xs:documentation>Specifies the output format.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="byte-order-mark" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether a byte order mark is written at the start of the file.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cdata-section-elements" type="c:CDataSectionElements">
            <xs:annotation>
               <xs:documentation>Specifies elements whose child text nodes should be wrapped in a CDATA section.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="doctype-public" type="c:String">
            <xs:annotation>
               <xs:documentation>Specifies a public document type declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="doctype-system" type="c:String">
            <xs:annotation>
               <xs:documentation>Specifies a system document type declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="encoding" type="c:String">
            <xs:annotation>
               <xs:documentation>Specifies the output encoding.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="escape-uri-attributes" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to escape URI attributes in HTML and XHTML documents.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="html-version" type="c:Decimal">
            <xs:annotation>
               <xs:documentation>Specifies the HTML version.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="include-content-type" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to include a meta element in the head of HTML and XHTML documents, specifying the used character encoding.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="indent" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to indent the output.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="indent-spaces" type="c:Integer">
            <xs:annotation>
               <xs:documentation>The number of spaces to use for indenting.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="item-separator" type="c:String">
            <xs:annotation>
               <xs:documentation>A string to intersperse when outputting multiple items.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="media-type" type="c:String">
            <xs:annotation>
               <xs:documentation>The media type (MIME content type) of the output, to include in a meta element in the head of HTML and XHTML documents.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="omit-xml-declaration" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to omit the XML declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="standalone" type="c:OutputStandalone">
            <xs:annotation>
               <xs:documentation>Specifies whether to include the standalone document declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="suppress-indentation" type="c:SuppressIndentation">
            <xs:annotation>
               <xs:documentation>Specifies elements that should not be indented.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="undeclare-prefixes" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to undeclare namespaces when outputting XML 1.1.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" type="c:OutputVersion">
            <xs:annotation>
               <xs:documentation>The version of the output format.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes-except-version"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="validation">
      <xs:annotation>
         <xs:documentation>Defines default values for validation messages.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="c:validation-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:attributeGroup name="validation-attributes">
      <xs:attribute name="error-resource-type" type="c:Type">
         <xs:annotation>
            <xs:documentation>A type that contains error message resources for validation attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="data-type-error-message" type="c:String">
         <xs:annotation>
            <xs:documentation>An error message for the data-type attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="data-type-error-resource" type="c:String">
         <xs:annotation>
            <xs:documentation>A resource name that contains an error message for the data-type attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required-error-message" type="c:String">
         <xs:annotation>
            <xs:documentation>An error message for the required attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required-error-resource" type="c:String">
         <xs:annotation>
            <xs:documentation>A resource name that contains an error message for the required attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="length-error-message" type="c:String">
         <xs:annotation>
            <xs:documentation>An error message for the min-length and max-length attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="length-error-resource" type="c:String">
         <xs:annotation>
            <xs:documentation>A resource name that contains an error message for the min-length and max-length attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pattern-error-message" type="c:String">
         <xs:annotation>
            <xs:documentation>An error message for the pattern attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pattern-error-resource" type="c:String">
         <xs:annotation>
            <xs:documentation>A resource name that contains an error message for the pattern attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="range-error-message" type="c:String">
         <xs:annotation>
            <xs:documentation>An error message for the min and max attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="range-error-resource" type="c:String">
         <xs:annotation>
            <xs:documentation>A resource name that contains an error message for the min and max attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="equal-to-error-message" type="c:String">
         <xs:annotation>
            <xs:documentation>An error message for the equal-to attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="equal-to-error-resource" type="c:String">
         <xs:annotation>
            <xs:documentation>A resource name that contains an error message for the equal-to attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <!-- ## Instructions -->
   <xs:element name="assert">
      <xs:annotation>
         <xs:documentation>Checks for a condition and signals a message if the condition is false.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The condition to check for.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A message to signal.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="attribute">
      <xs:annotation>
         <xs:documentation>Creates an attribute node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The name of the attribute. Attribute value template (QName).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:QName c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The value of the attribute.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="namespace">
            <xs:annotation>
               <xs:documentation>The namespace of the attribute. Attribute value template (URI).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:URI c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="separator" type="c:AVT">
            <xs:annotation>
               <xs:documentation>A string to intersperse between values. Attribute value template.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="break">
      <xs:annotation>
         <xs:documentation>Exits from a loop.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="call-template">
      <xs:annotation>
         <xs:documentation>Invokes a template.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:EQName">
            <xs:annotation>
               <xs:documentation>The name of the template to invoke.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="catch">
      <xs:annotation>
         <xs:documentation>Catches an exception.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="exception" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The exception to catch.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="when" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An exception filter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A value to output.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="choose">
      <xs:annotation>
         <xs:documentation>Chooses between multiple alternatives.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element maxOccurs="unbounded" ref="c:when"/>
            <xs:element minOccurs="0" ref="c:otherwise"/>
         </xs:sequence>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="comment">
      <xs:annotation>
         <xs:documentation>Creates a comment node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The comment.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="continue">
      <xs:annotation>
         <xs:documentation>Interrupts the current loop iteration and advances to the next.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="delegate">
      <xs:annotation>
         <xs:documentation>Creates a template delegate.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:param"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="element">
      <xs:annotation>
         <xs:documentation>Creates an element node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The name of the element. Attribute value template (QName).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:QName-default c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="namespace">
            <xs:annotation>
               <xs:documentation>The namespace of the element. Attribute value template (URI).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:URI c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="use-attribute-sets" type="c:UseAttributeSets">
            <xs:annotation>
               <xs:documentation>Specifies attribute sets to use on the element.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="evaluate-delegate">
      <xs:annotation>
         <xs:documentation>Evaluates a template delegate.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="value" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The template delegate instance.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="with-params" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An object with parameters.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="evaluate-package">
      <xs:annotation>
         <xs:documentation>Evaluates a dynamically loaded package.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the package.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The package instance.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="global-params" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An object with global parameters.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initial-template">
            <xs:annotation>
               <xs:documentation>The name of the initial template. Attribute value template (EQName).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:EQName c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="template-params" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An object with template parameters.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-params" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An object with tunnel template parameters.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="fallback">
      <xs:annotation>
         <xs:documentation>Defines fallback behavior for the parent element.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="finally">
      <xs:annotation>
         <xs:documentation>Defines unconditional behavior for the c:try instruction.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A value to output.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="for-each">
      <xs:annotation>
         <xs:documentation>Processes each item in a sequence of items.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:sort"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the item.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="in" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The source of the items.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the item.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="for-each-group">
      <xs:annotation>
         <xs:documentation>Processes a sequence of items in groups.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:sort"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the group.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="in" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The source of the items.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group-by" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An expression to use as grouping key.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group-size" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The maximum number of items a group may have.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="if">
      <xs:annotation>
         <xs:documentation>Defines conditional behavior.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The condition to check for the contents to be processed.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="message">
      <xs:annotation>
         <xs:documentation>Signals a message.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The message.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="terminate">
            <xs:annotation>
               <xs:documentation>Specifies whether to stop the execution of the program. Attribute value template (Boolean).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:Boolean c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="namespace">
      <xs:annotation>
         <xs:documentation>Creates a namespace node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The namespace prefix. Attribute value template (NCName).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:NCName c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The namespace URI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="next-function">
      <xs:annotation>
         <xs:documentation>Invokes the overriden function.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="arguments" type="c:ArgumentList">
            <xs:annotation>
               <xs:documentation>The function call arguments.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="next-template">
      <xs:annotation>
         <xs:documentation>Invokes the overriden template.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="object">
      <xs:annotation>
         <xs:documentation>Appends a value to the current output.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="value" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The value to output.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="otherwise">
      <xs:annotation>
         <xs:documentation>Represents a fallback in a c:choose instruction in case no other choice is selected.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="processing-instruction">
      <xs:annotation>
         <xs:documentation>Creates a processing instruction node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The name of the processing instruction. Attribute value template (NCName).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:NCName c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The processing instruction content.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="result-document">
      <xs:annotation>
         <xs:documentation>Creates a secondary result.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="href" use="required">
            <xs:annotation>
               <xs:documentation>The relative or absolute URI to send the result to. Attribute value template (URI).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:URI c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attributeGroup ref="c:output-avt-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="return">
      <xs:annotation>
         <xs:documentation>Exits from a template or function.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A value to return.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="script">
      <xs:annotation>
         <xs:documentation>Embeds or references a script of code.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:attributeGroup ref="c:standard-attributes"/>
         <xs:attribute name="src" type="c:URI">
            <xs:annotation>
               <xs:documentation>The relative or absolute URI of the script of code.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="serialize">
      <xs:annotation>
         <xs:documentation>Creates a string representation of its contents.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:output-avt-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="set">
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="member" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The reference to set.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The value to assign.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the value.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="sort">
      <xs:annotation>
         <xs:documentation>Defines how to sort sequences of items.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>An expression to use as sort key.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="order">
            <xs:annotation>
               <xs:documentation>Specifies the sort direction ("ascending" or "descending"). Attribute value template.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:SortOrder c:AVTExpr"/>
            </xs:simpleType>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="text">
      <xs:annotation>
         <xs:documentation>Creates a text node or string.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:attribute name="disable-output-escaping" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to omit output escaping.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="try">
      <xs:annotation>
         <xs:documentation>Recovers from exceptions or defines unconditional behavior.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:group minOccurs="0" ref="c:sequence-constructor"/>
            <xs:choice>
               <xs:sequence>
                  <xs:element maxOccurs="unbounded" ref="c:catch"/>
                  <xs:element minOccurs="0" ref="c:finally"/>
               </xs:sequence>
               <xs:element ref="c:finally"/>
            </xs:choice>
         </xs:sequence>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>A value to output.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rollback-output" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to discard the output when an exception occurs.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="using">
      <xs:annotation>
         <xs:documentation>Facilitates the unconditional disposing of an object.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="value" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The disposable object.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="name" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the disposable variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the disposable variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="value-of">
      <xs:annotation>
         <xs:documentation>Creates a text node or string.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The content of the text node or string.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disable-output-escaping" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to omit output escaping.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="separator" type="c:AVT">
            <xs:annotation>
               <xs:documentation>A string to intersperse between values. Attribute value template.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="variable">
      <xs:annotation>
         <xs:documentation>Defines a variable.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The initial value of the variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="void">
      <xs:annotation>
         <xs:documentation>Evaluates ignoring the result.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The expression to evaluate.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="when">
      <xs:annotation>
         <xs:documentation>Represents a choice in a c:choose instruction.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The condition to check for the current choice to be selected.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="while">
      <xs:annotation>
         <xs:documentation>Repeateadly evaluates instructions until a condition is not met.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The condition for the loop to continue.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="with-param">
      <xs:annotation>
         <xs:documentation>Defines parameter arguments for a template or package.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required" type="c:Name">
            <xs:annotation>
               <xs:documentation>The name of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:Expression">
            <xs:annotation>
               <xs:documentation>The value of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:Type">
            <xs:annotation>
               <xs:documentation>The type of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel" type="c:Boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the parameter should be tunneled.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:attributeGroup name="output-avt-attributes">
      <xs:attribute name="format">
         <xs:annotation>
            <xs:documentation>The name of the output definition to get serialization parameters from. Attribute value template (EQName).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:EQName c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="method">
         <xs:annotation>
            <xs:documentation>Specifies the output format. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:OutputMethod c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="byte-order-mark">
         <xs:annotation>
            <xs:documentation>Specifies whether a byte order mark is written at the start of the file. Attribute value template (Boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Boolean c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="cdata-section-elements">
         <xs:annotation>
            <xs:documentation>Specifies elements whose child text nodes should be wrapped in a CDATA section. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:CDataSectionElements c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="doctype-public" type="c:AVT">
         <xs:annotation>
            <xs:documentation>Specifies a public document type declaration. Attribute value template.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="doctype-system" type="c:AVT">
         <xs:annotation>
            <xs:documentation>Specifies a system document type declaration. Attribute value template.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="encoding" type="c:AVT">
         <xs:annotation>
            <xs:documentation>Specifies the output encoding. Attribute value template.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape-uri-attributes">
         <xs:annotation>
            <xs:documentation>Specifies whether to escape URI attributes in HTML and XHTML documents. Attribute value template (Boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Boolean c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="html-version">
         <xs:annotation>
            <xs:documentation>Specifies the HTML version. Attribute value template (Decimal).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Decimal c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="include-content-type">
         <xs:annotation>
            <xs:documentation>Specifies whether to include a meta element in the head of HTML and XHTML documents, specifying the used character encoding. Attribute value template (Boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Boolean c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="indent">
         <xs:annotation>
            <xs:documentation>Specifies whether to indent the output. Attribute value template (Boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Boolean c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="indent-spaces">
         <xs:annotation>
            <xs:documentation>The number of spaces to use for indenting. Attribute value template (Integer).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Integer c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="item-separator" type="c:AVT">
         <xs:annotation>
            <xs:documentation>A string to intersperse when outputting multiple items. Attribute value template.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="media-type" type="c:AVT">
         <xs:annotation>
            <xs:documentation>The media type (MIME content type) of the output, to include in a meta element in the head of HTML and XHTML documents. Attribute value template.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="omit-xml-declaration">
         <xs:annotation>
            <xs:documentation>Specifies whether to omit the XML declaration. Attribute value template (Boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Boolean c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="standalone">
         <xs:annotation>
            <xs:documentation>Specifies whether to include the standalone document declaration. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:OutputStandalone c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="suppress-indentation">
         <xs:annotation>
            <xs:documentation>Specifies elements that should not be indented. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:SuppressIndentation c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="undeclare-prefixes">
         <xs:annotation>
            <xs:documentation>Specifies whether to undeclare namespaces when outputting XML 1.1. Attribute value template (Boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:Boolean c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="output-version">
         <xs:annotation>
            <xs:documentation>The version of the output format. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:OutputVersion c:AVTExpr"/>
         </xs:simpleType>
      </xs:attribute>
   </xs:attributeGroup>
   <!-- ## Data Types -->
   <xs:simpleType name="String">
      <xs:restriction base="xs:string"/>
   </xs:simpleType>
   <xs:simpleType name="Decimal">
      <xs:restriction base="xs:decimal"/>
   </xs:simpleType>
   <xs:simpleType name="Integer">
      <xs:restriction base="xs:int"/>
   </xs:simpleType>
   <xs:simpleType name="Boolean">
      <xs:annotation>
         <xs:documentation>One of the values "yes", "no", "true", "false", "1" or "0".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="yes"/>
         <xs:enumeration value="no"/>
         <xs:enumeration value="true"/>
         <xs:enumeration value="false"/>
         <xs:enumeration value="1"/>
         <xs:enumeration value="0"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="QName">
      <xs:annotation>
         <xs:documentation>A QName. Unprefixed names are in the null namespace.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:Name">
         <xs:pattern value="([^:\{\}]+:)?[^:\{\}]+"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="QName-default">
      <xs:annotation>
         <xs:documentation>A QName. Unprefixed names are in the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:QName"/>
   </xs:simpleType>
   <xs:simpleType name="EQName">
      <xs:annotation>
         <xs:documentation>An EQName. Unprefixed QNames are in the null namespace.</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:QName c:URIQualifiedName"/>
   </xs:simpleType>
   <xs:simpleType name="EQName-default">
      <xs:annotation>
         <xs:documentation>An EQName. Unprefixed QNames are in the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:QName-default c:URIQualifiedName"/>
   </xs:simpleType>
   <xs:simpleType name="URIQualifiedName">
      <xs:restriction base="xs:Name">
         <xs:pattern value="Q\{[^\{\}]*\}([^:\{\}]+:)?[^:\{\}]+"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="NCName">
      <xs:restriction base="xs:NCName"/>
   </xs:simpleType>
   <xs:simpleType name="URI">
      <xs:restriction base="xs:anyURI"/>
   </xs:simpleType>
   <xs:simpleType name="Version">
      <xs:restriction base="c:Decimal"/>
   </xs:simpleType>
   <xs:simpleType name="Language">
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="TransformText">
      <xs:annotation>
         <xs:documentation>One of the values "none", "normalize-space" or "trim".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="none"/>
         <xs:enumeration value="normalize-space"/>
         <xs:enumeration value="trim"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="ExtensionElementPrefixes">
      <xs:annotation>
         <xs:documentation>A list of space separated namespace prefixes. Use "#default" to refer to the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:list>
         <xs:simpleType>
            <xs:union memberTypes="c:NCName">
               <xs:simpleType>
                  <xs:restriction base="xs:token">
                     <xs:enumeration value="#default"/>
                  </xs:restriction>
               </xs:simpleType>
            </xs:union>
         </xs:simpleType>
      </xs:list>
   </xs:simpleType>
   <xs:simpleType name="UseAttributeSets">
      <xs:annotation>
         <xs:documentation>A list of space separated EQNames.</xs:documentation>
      </xs:annotation>
      <xs:list itemType="c:EQName"/>
   </xs:simpleType>
   <xs:simpleType name="Visibility">
      <xs:annotation>
         <xs:documentation>One of the values "public", "private", "final" or "abstract".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="public"/>
         <xs:enumeration value="private"/>
         <xs:enumeration value="final"/>
         <xs:enumeration value="abstract"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="SortOrder">
      <xs:annotation>
         <xs:documentation>One of the values "ascending" or "descending".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="ascending"/>
         <xs:enumeration value="descending"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="OutputMethod">
      <xs:annotation>
         <xs:documentation>One of the values "xml", "html", "xhtml", "text", or an EQName that must not be in the null namespace.</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:EQName">
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="xml"/>
            </xs:restriction>
         </xs:simpleType>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="html"/>
            </xs:restriction>
         </xs:simpleType>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="xhtml"/>
            </xs:restriction>
         </xs:simpleType>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="text"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="OutputVersion">
      <xs:annotation>
         <xs:documentation>The version of the output method format (usually "1.0" for XML, "5.0" for HTML, etc.)</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:NMTOKEN"/>
   </xs:simpleType>
   <xs:simpleType name="OutputStandalone">
      <xs:annotation>
         <xs:documentation>One of the values "yes", "no", "true", "false", "1", "0", or "omit".</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:Boolean">
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="omit"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="CDataSectionElements">
      <xs:annotation>
         <xs:documentation>A list of space separated EQNames. Unprefixed QNames are in the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:list itemType="c:EQName-default"/>
   </xs:simpleType>
   <xs:simpleType name="SuppressIndentation">
      <xs:annotation>
         <xs:documentation>A list of space separated EQNames. Unprefixed QNames are in the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:list itemType="c:EQName-default"/>
   </xs:simpleType>
   <xs:simpleType name="AVT">
      <xs:annotation>
         <xs:documentation>Attribute value template</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:String"/>
   </xs:simpleType>
   <xs:simpleType name="AVTExpr">
      <xs:annotation>
         <xs:documentation>Attribute value template</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:pattern value=".*\{.+\}.*"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="Name">
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="Type">
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="ArgumentList">
      <xs:annotation>
         <xs:documentation>Argument list</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="Expression">
      <xs:annotation>
         <xs:documentation>Expression</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
</xs:schema>