<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright 2015 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
   xmlns:ann="http://relaxng.org/ns/compatibility/annotations/1.0"
   xmlns:c="http://maxtoroq.github.io/XCST"
   ns="http://maxtoroq.github.io/XCST"
   datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

   <start>
      <choice>
         <ref name="module"/>
         <ref name="package"/>
         <ref name="simplified-module-element"/>
      </choice>
   </start>

   <define name="declaration-element">
      <choice>
         <ref name="attribute-set"/>
         <ref name="function"/>
         <ref name="output"/>
         <ref name="param"/>
         <ref name="template"/>
         <ref name="type"/>
         <ref name="validation"/>
         <ref name="variable"/>
      </choice>
   </define>

   <define name="instruction-element">
      <choice>
         <ref name="assert"/>
         <ref name="attribute"/>
         <ref name="break"/>
         <ref name="call-template"/>
         <ref name="choose"/>
         <ref name="comment"/>
         <ref name="continue"/>
         <ref name="delegate"/>
         <ref name="element"/>
         <ref name="evaluate-delegate"/>
         <ref name="fallback"/>
         <ref name="for-each"/>
         <ref name="for-each-group"/>
         <ref name="if"/>
         <ref name="message"/>
         <ref name="namespace"/>
         <ref name="next-function"/>
         <ref name="next-template"/>
         <ref name="object"/>
         <ref name="processing-instruction"/>
         <ref name="result-document"/>
         <ref name="return"/>
         <ref name="script"/>
         <ref name="serialize"/>
         <ref name="set"/>
         <ref name="text"/>
         <ref name="try"/>
         <ref name="using"/>
         <ref name="using-module"/>
         <ref name="value-of"/>
         <ref name="variable"/>
         <ref name="void"/>
         <ref name="while"/>
      </choice>
   </define>

   <define name="standard-attributes">
      <ref name="standard-attributes-except-version"/>
      <optional>
         <attribute name="version">
            <ref name="Version"/>
         </attribute>
      </optional>
   </define>

   <define name="standard-attributes-except-version">
      <zeroOrMore>
         <choice>
            <attribute name="expand-text">
               <ref name="Boolean"/>
            </attribute>
            <attribute name="extension-element-prefixes">
               <list>
                  <zeroOrMore>
                     <ref name="Prefix"/>
                  </zeroOrMore>
               </list>
            </attribute>
            <attribute name="transform-text">
               <choice>
                  <value>none</value>
                  <value>normalize-space</value>
                  <value>trim</value>
               </choice>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>

   <define name="literal-result-element">
      <element>
         <anyName>
            <except>
               <nsName/>
            </except>
         </anyName>
         <ref name="literal-result-element-attributes-except-version"/>
         <optional>
            <attribute name="c:version">
               <ref name="Version"/>
            </attribute>
         </optional>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="literal-result-element-attributes-except-version">
      <zeroOrMore>
         <choice>
            <attribute>
               <anyName>
                  <except>
                     <nsName/>
                  </except>
               </anyName>
               <ref name="AVT"/>
            </attribute>
            <attribute name="c:expand-text">
               <ref name="Boolean"/>
            </attribute>
            <attribute name="c:extension-element-prefixes">
               <list>
                  <zeroOrMore>
                     <ref name="Prefix"/>
                  </zeroOrMore>
               </list>
            </attribute>
            <attribute name="c:use-attribute-sets">
               <list>
                  <zeroOrMore>
                     <ref name="EQName"/>
                  </zeroOrMore>
               </list>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>

   <define name="sequence-constructor">
      <zeroOrMore>
         <ref name="sequence-constructor-node"/>
      </zeroOrMore>
   </define>

   <define name="sequence-constructor-node">
      <choice>
         <ref name="instruction-element"/>
         <ref name="literal-result-element"/>
         <text/>
      </choice>
   </define>

   <define name="value-attribute-or-content">
      <choice>
         <attribute name="value">
            <ref name="Expression"/>
         </attribute>
         <ref name="sequence-constructor"/>
      </choice>
   </define>

   <define name="visibility-attribute">
      <optional>
         <attribute name="visibility">
            <ref name="Visibility"/>
         </attribute>
      </optional>
   </define>

   <define name="user-defined-data-element">
      <element>
         <anyName>
            <except>
               <nsName/>
               <nsName ns=""/>
            </except>
         </anyName>
         <ref name="any-nodes"/>
      </element>
   </define>

   <define name="any-nodes">
      <zeroOrMore>
         <choice>
            <attribute>
               <anyName/>
            </attribute>
            <text/>
            <element>
               <anyName/>
               <ref name="any-nodes"/>
            </element>
         </choice>
      </zeroOrMore>
   </define>

   <define name="simplified-module-element">
      <element>
         <anyName>
            <except>
               <nsName/>
            </except>
         </anyName>
         <attribute name="c:version">
            <ref name="Version"/>
         </attribute>
         <attribute name="c:language">
            <ref name="Language"/>
         </attribute>
         <ref name="literal-result-element-attributes-except-version"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="module">
      <element name="module">
         <ref name="module-content"/>
      </element>
   </define>

   <define name="package">
      <element name="package">
         <optional>
            <attribute name="name">
               <ref name="Name"/>
            </attribute>
         </optional>
         <ref name="module-content"/>
      </element>
   </define>

   <define name="module-content">
      <attribute name="version">
         <ref name="Version"/>
      </attribute>
      <attribute name="language">
         <ref name="Language"/>
      </attribute>
      <ref name="standard-attributes-except-version"/>
      <zeroOrMore>
         <ref name="use-functions"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="use-package"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="import"/>
      </zeroOrMore>
      <zeroOrMore>
         <choice>
            <ref name="declaration-element"/>
            <ref name="user-defined-data-element"/>
         </choice>
      </zeroOrMore>
   </define>

   <define name="use-functions">
      <element name="use-functions">
         <attribute name="in">
            <ref name="Type"/>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="alias">
                  <ref name="Type"/>
               </attribute>
               <attribute name="static-only">
                  <ref name="Boolean"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="use-package">
      <element name="use-package">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="override"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="override">
      <element name="override">
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <choice>
               <ref name="template"/>
               <ref name="function"/>
               <ref name="variable"/>
               <ref name="param"/>
               <ref name="attribute-set"/>
               <ref name="type"/>
            </choice>
         </zeroOrMore>
      </element>
   </define>

   <define name="import">
      <element name="import">
         <attribute name="href">
            <ref name="URI"/>
         </attribute>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="template">
      <element name="template">
         <attribute name="name">
            <ref name="EQName"/>
         </attribute>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="param"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="function">
      <element name="function">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <optional>
            <attribute name="as">
               <ref name="Type"/>
            </attribute>
         </optional>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="param"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="param">
      <element name="param">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="as">
                  <ref name="Type"/>
               </attribute>
               <attribute name="required">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="tunnel">
                  <ref name="Boolean"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="attribute-set">
      <element name="attribute-set">
         <attribute name="name">
            <ref name="EQName"/>
         </attribute>
         <optional>
            <attribute name="use-attribute-sets">
               <list>
                  <zeroOrMore>
                     <ref name="EQName"/>
                  </zeroOrMore>
               </list>
            </attribute>
         </optional>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="attribute"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="type">
      <element name="type">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <ref name="type-or-member-attributes"/>
         <zeroOrMore>
            <ref name="metadata"/>
         </zeroOrMore>
         <zeroOrMore>
            <ref name="member"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="member">
      <element name="member">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="type-or-member-attributes"/>
         <ref name="member-attributes"/>
         <zeroOrMore>
            <ref name="metadata"/>
         </zeroOrMore>
         <choice>
            <attribute name="as">
               <ref name="Type"/>
            </attribute>
            <oneOrMore>
               <ref name="member"/>
            </oneOrMore>
         </choice>
      </element>
   </define>

   <define name="metadata">
      <element name="metadata">
         <attribute name="value">
            <ref name="Expression"/>
         </attribute>
      </element>
   </define>

   <define name="type-or-member-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="resource-type">
               <ann:documentation>A type that contains resources for name, short-name, description and placeholder attributes.</ann:documentation>
               <ref name="Type"/>
            </attribute>
            <attribute name="disable-empty-string-to-null-conversion">
               <ann:documentation>Indicates if empty strings should not be converted to null for this member.</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
            <attribute name="allow-empty-string">
               <ann:documentation>Indicates if an empty string is a valid value for this member.</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
         </choice>
      </zeroOrMore>
      <ref name="validation-attributes"/>
   </define>

   <define name="member-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="auto-initialize">
               <ann:documentation>Auto-assign an initial value to this member.</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
            <attribute name="display">
               <ann:documentation>Indicates if this member should be displayed in a UI.</ann:documentation>
               <choice>
                  <value>view-only</value>
                  <ann:documentation>Indicates that this member should only be displayed in a viewing UI.</ann:documentation>

                  <value>edit-only</value>
                  <ann:documentation>Indicates that this member should only be displayed in an editing UI.</ann:documentation>

                  <ref name="Boolean"/>
               </choice>
            </attribute>
            <attribute name="display-name">
               <ann:documentation>A name suitable for UI.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="description">
               <ann:documentation>A description of this member suitable for UI.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="short-name">
               <ann:documentation>A shorter name suitable for UI where the display name would be too long to fit (e.g. a table column).</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="place-holder">
               <ann:documentation>A hint to the user of what can be entered in a control for this member.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="order">
               <ann:documentation>A number that indicates the relative position of this member in a UI.</ann:documentation>
               <ref name="Integer"/>
            </attribute>
            <attribute name="group">
               <ann:documentation>A name that is used to group members in a UI.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="format">
               <ann:documentation>A formatting string that specifies the display format for the value of this member.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="apply-format-in-edit-mode">
               <ann:documentation>Indicates if the display format should be used in an edit control for this member.</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
            <attribute name="disable-output-escaping">
               <ann:documentation>Indicates if this member should not be escaped when displaying in a UI (e.g. HTML content).</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
            <attribute name="null-display-text">
               <ann:documentation>A text that is displayed for this member when the value is null.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="template">
               <ann:documentation>The name of a template to use when displaying this member in a UI.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="read-only">
               <ann:documentation>Indicates if editing should be disabled for this member in an editing UI.</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
            <attribute name="auto-generate-filter">
               <ann:documentation>Indicates if a filtering control should be automatically displayed for this member in a UI.</ann:documentation>
               <ref name="Boolean"/>
            </attribute>
            <attribute name="data-type">
               <choice>
                  <value>CreditCard</value>
                  <value>Currency</value>
                  <value>Date</value>
                  <value>DateTime</value>
                  <value>Duration</value>
                  <value>EmailAddress</value>
                  <value>Html</value>
                  <value>ImageUrl</value>
                  <value>MultilineText</value>
                  <value>Password</value>
                  <value>PhoneNumber</value>
                  <value>PostalCode</value>
                  <value>Text</value>
                  <value>Time</value>
                  <value>Upload</value>
                  <value>Url</value>
               </choice>
            </attribute>
            <attribute name="required">
               <ref name="Boolean"/>
            </attribute>
            <attribute name="max-length">
               <ref name="Expression"/>
            </attribute>
            <attribute name="min-length">
               <ref name="Expression"/>
            </attribute>
            <attribute name="pattern">
               <ref name="String"/>
            </attribute>
            <attribute name="min">
               <ref name="Expression"/>
            </attribute>
            <attribute name="max">
               <ref name="Expression"/>
            </attribute>
            <attribute name="range-type">
               <ref name="Type"/>
            </attribute>
            <attribute name="equal-to">
               <ref name="Name"/>
            </attribute>
         </choice>
      </zeroOrMore>
      <optional>
         <choice>
            <attribute name="value">
               <ann:documentation>An initial value for this member.</ann:documentation>
               <ref name="Expression"/>
            </attribute>
            <attribute name="expression">
               <ann:documentation>An expression for computed members.</ann:documentation>
               <ref name="Expression"/>
            </attribute>
         </choice>
      </optional>
   </define>

   <define name="output">
      <element name="output">
         <zeroOrMore>
            <choice>
               <attribute name="name">
                  <ref name="EQName"/>
               </attribute>
               <attribute name="method">
                  <ref name="OutputMethod"/>
               </attribute>
               <attribute name="byte-order-mark">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="cdata-section-elements">
                  <list>
                     <zeroOrMore>
                        <ref name="EQName-default"/>
                     </zeroOrMore>
                  </list>
               </attribute>
               <attribute name="doctype-public">
                  <ref name="String"/>
               </attribute>
               <attribute name="doctype-system">
                  <ref name="String"/>
               </attribute>
               <attribute name="encoding">
                  <ref name="String"/>
               </attribute>
               <attribute name="escape-uri-attributes">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="html-version">
                  <ref name="Decimal"/>
               </attribute>
               <attribute name="include-content-type">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="indent">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="indent-spaces">
                  <ref name="Integer"/>
               </attribute>
               <attribute name="item-separator">
                  <ref name="String"/>
               </attribute>
               <attribute name="media-type">
                  <ref name="String"/>
               </attribute>
               <attribute name="omit-xml-declaration">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="standalone">
                  <ref name="OutputStandalone"/>
               </attribute>
               <attribute name="suppress-indentation">
                  <list>
                     <zeroOrMore>
                        <ref name="EQName-default"/>
                     </zeroOrMore>
                  </list>
               </attribute>
               <attribute name="undeclare-prefixes">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="version">
                  <ref name="OutputVersion"/>
               </attribute>
               <ref name="standard-attributes-except-version"/>
            </choice>
         </zeroOrMore>
      </element>
   </define>

   <define name="validation">
      <element name="validation">
         <ref name="validation-attributes"/>
      </element>
   </define>

   <define name="validation-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="error-resource-type">
               <ann:documentation>A type that contains error message resources for validation attributes.</ann:documentation>
               <ref name="Type"/>
            </attribute>
            <attribute name="data-type-error-message">
               <ann:documentation>An error message for the data-type attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="data-type-error-resource">
               <ann:documentation>A resource name that contains an error message for the data-type attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="required-error-message">
               <ann:documentation>An error message for the required attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="required-error-resource">
               <ann:documentation>A resource name that contains an error message for the required attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="length-error-message">
               <ann:documentation>An error message for the min-length and max-length attributes.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="length-error-resource">
               <ann:documentation>A resource name that contains an error message for the min-length and max-length attributes.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="pattern-error-message">
               <ann:documentation>An error message for the pattern attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="pattern-error-resource">
               <ann:documentation>A resource name that contains an error message for the pattern attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="range-error-message">
               <ann:documentation>An error message for the min and max attributes.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="range-error-resource">
               <ann:documentation>A resource name that contains an error message for the min and max attributes.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="equal-to-error-message">
               <ann:documentation>An error message for the equal-to attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
            <attribute name="equal-to-error-resource">
               <ann:documentation>A resource name that contains an error message for the equal-to attribute.</ann:documentation>
               <ref name="String"/>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>

   <!--
      ## Instructions
   -->

   <define name="assert">
      <element name="assert">
         <attribute name="test">
            <ref name="Expression"/>
         </attribute>
         <optional>
            <attribute name="error-code">
               <choice>
                  <ref name="EQName"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="attribute">
      <element name="attribute">
         <attribute name="name">
            <choice>
               <ref name="QName"/>
               <ref name="AVTExpr"/>
            </choice>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="namespace">
                  <choice>
                     <ref name="URI"/>
                     <ref name="AVTExpr"/>
                  </choice>
               </attribute>
               <attribute name="separator">
                  <ref name="AVT"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="break">
      <element name="break">
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="call-template">
      <element name="call-template">
         <attribute name="name">
            <ref name="EQName"/>
         </attribute>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param-for-templates"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="catch">
      <element name="catch">
         <zeroOrMore>
            <choice>
               <attribute name="exception">
                  <ref name="Expression"/>
               </attribute>
               <attribute name="when">
                  <ref name="Expression"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="choose">
      <element name="choose">
         <ref name="standard-attributes"/>
         <oneOrMore>
            <element name="when">
               <attribute name="test">
                  <ref name="Expression"/>
               </attribute>
               <ref name="standard-attributes"/>
               <ref name="sequence-constructor"/>
            </element>
         </oneOrMore>
         <optional>
            <element name="otherwise">
               <ref name="standard-attributes"/>
               <ref name="sequence-constructor"/>
            </element>
         </optional>
      </element>
   </define>

   <define name="comment">
      <element name="comment">
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="continue">
      <element name="continue">
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="delegate">
      <element name="delegate">
         <optional>
            <attribute name="as">
               <ref name="Type"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="param"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="element">
      <element name="element">
         <attribute name="name">
            <choice>
               <ref name="QName-default"/>
               <ref name="AVTExpr"/>
            </choice>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="namespace">
                  <choice>
                     <ref name="URI"/>
                     <ref name="AVTExpr"/>
                  </choice>
               </attribute>
               <attribute name="use-attribute-sets">
                  <list>
                     <zeroOrMore>
                        <ref name="EQName"/>
                     </zeroOrMore>
                  </list>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="evaluate-delegate">
      <element name="evaluate-delegate">
         <attribute name="value">
            <ref name="Expression"/>
         </attribute>
         <optional>
            <attribute name="with-params">
               <ref name="Expression"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param-for-templates"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="fallback">
      <element name="fallback">
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="finally">
      <element name="finally">
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="for-each">
      <element name="for-each">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <attribute name="in">
            <ref name="Expression"/>
         </attribute>
         <optional>
            <attribute name="as">
               <ref name="Type"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="sort"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="for-each-group">
      <element name="for-each-group">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <attribute name="in">
            <ref name="Expression"/>
         </attribute>
         <choice>
            <attribute name="group-by">
               <ref name="Expression"/>
            </attribute>
            <attribute name="group-size">
               <ref name="Expression"/>
            </attribute>
         </choice>
         <zeroOrMore>
            <ref name="sort"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="if">
      <element name="if">
         <attribute name="test">
            <ref name="Expression"/>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="message">
      <element name="message">
         <zeroOrMore>
            <choice>
               <attribute name="terminate">
                  <choice>
                     <ref name="Boolean"/>
                     <ref name="AVTExpr"/>
                  </choice>
               </attribute>
               <attribute name="error-code">
                  <choice>
                     <ref name="EQName"/>
                     <ref name="AVTExpr"/>
                  </choice>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="namespace">
      <element name="namespace">
         <attribute name="name">
            <choice>
               <ref name="NCName"/>
               <ref name="AVTExpr"/>
            </choice>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="next-function">
      <element name="next-function">
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param-for-functions"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="next-template">
      <element name="next-template">
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param-for-templates"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="object">
      <element name="object">
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="processing-instruction">
      <element name="processing-instruction">
         <attribute name="name">
            <choice>
               <ref name="NCName"/>
               <ref name="AVTExpr"/>
            </choice>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="result-document">
      <element name="result-document">
         <attribute name="href">
            <choice>
               <ref name="URI"/>
               <ref name="AVTExpr"/>
            </choice>
         </attribute>
         <ref name="output-avt-attributes"/>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="return">
      <element name="return">
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="script">
      <element name="script">
         <ref name="standard-attributes"/>
         <choice>
            <attribute name="src">
               <ref name="URI"/>
            </attribute>
            <text/>
         </choice>
      </element>
   </define>

   <define name="serialize">
      <element name="serialize">
         <ref name="output-avt-attributes"/>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="set">
      <element name="set">
         <attribute name="member">
            <ref name="Expression"/>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="sort">
      <element name="sort">
         <zeroOrMore>
            <choice>
               <attribute name="value">
                  <ref name="Expression"/>
               </attribute>
               <attribute name="order">
                  <choice>
                     <ref name="SortOrder"/>
                     <ref name="AVTExpr"/>
                  </choice>
               </attribute>
            </choice>
         </zeroOrMore>
      </element>
   </define>

   <define name="text">
      <element name="text">
         <optional>
            <attribute name="disable-output-escaping">
               <ref name="Boolean"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <text/>
      </element>
   </define>

   <define name="try">
      <element name="try">
         <optional>
            <attribute name="rollback-output">
               <ref name="Boolean"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
         <choice>
            <group>
               <oneOrMore>
                  <ref name="catch"/>
               </oneOrMore>
               <optional>
                  <ref name="finally"/>
               </optional>
            </group>
            <ref name="finally"/>
         </choice>
      </element>
   </define>

   <define name="using">
      <element name="using">
         <attribute name="value">
            <ref name="Expression"/>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="name">
                  <ref name="Name"/>
               </attribute>
               <attribute name="as">
                  <ref name="Type"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="using-module">
      <element name="using-module">
         <attribute name="value">
            <ref name="Expression"/>
         </attribute>
         <optional>
            <attribute name="with-params">
               <ref name="Expression"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param-for-templates"/>
         </zeroOrMore>
         <element name="call-template">
            <attribute name="name">
               <choice>
                  <ref name="EQName"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <optional>
               <attribute name="with-params">
                  <ref name="Expression"/>
               </attribute>
            </optional>
            <ref name="standard-attributes"/>
            <zeroOrMore>
               <ref name="with-param-for-templates"/>
            </zeroOrMore>
         </element>
      </element>
   </define>

   <define name="value-of">
      <element name="value-of">
         <zeroOrMore>
            <choice>
               <attribute name="disable-output-escaping">
                  <ref name="Boolean"/>
               </attribute>
               <attribute name="separator">
                  <ref name="AVT"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="variable">
      <element name="variable">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <optional>
            <attribute name="as">
               <ref name="Type"/>
            </attribute>
         </optional>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="void">
      <element name="void">
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="while">
      <element name="while">
         <attribute name="test">
            <ref name="Expression"/>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="with-param-for-templates">
      <element name="with-param">
         <attribute name="name">
            <ref name="Name"/>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="as">
                  <ref name="Type"/>
               </attribute>
               <attribute name="tunnel">
                  <ref name="Boolean"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="with-param-for-functions">
      <element name="with-param">
         <zeroOrMore>
            <choice>
               <attribute name="name">
                  <ref name="Name"/>
               </attribute>
               <attribute name="as">
                  <ref name="Type"/>
               </attribute>
               <attribute name="tunnel">
                  <ref name="Boolean"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="value-attribute-or-content"/>
      </element>
   </define>

   <define name="output-avt-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="format">
               <choice>
                  <ref name="EQName"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="method">
               <choice>
                  <ref name="OutputMethod"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="byte-order-mark">
               <choice>
                  <ref name="Boolean"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="cdata-section-elements">
               <choice>
                  <list>
                     <zeroOrMore>
                        <ref name="EQName-default"/>
                     </zeroOrMore>
                  </list>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="doctype-public">
               <ref name="AVT"/>
            </attribute>
            <attribute name="doctype-system">
               <ref name="AVT"/>
            </attribute>
            <attribute name="encoding">
               <ref name="AVT"/>
            </attribute>
            <attribute name="escape-uri-attributes">
               <choice>
                  <ref name="Boolean"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="html-version">
               <choice>
                  <ref name="Decimal"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="include-content-type">
               <choice>
                  <ref name="Boolean"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="indent">
               <choice>
                  <ref name="Boolean"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="indent-spaces">
               <choice>
                  <ref name="Integer"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="item-separator">
               <ref name="AVT"/>
            </attribute>
            <attribute name="media-type">
               <ref name="AVT"/>
            </attribute>
            <attribute name="omit-xml-declaration">
               <choice>
                  <ref name="Boolean"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="standalone">
               <choice>
                  <ref name="OutputStandalone"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="suppress-indentation">
               <choice>
                  <list>
                     <zeroOrMore>
                        <ref name="EQName-default"/>
                     </zeroOrMore>
                  </list>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="undeclare-prefixes">
               <choice>
                  <ref name="Boolean"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
            <attribute name="output-version">
               <choice>
                  <ref name="OutputVersion"/>
                  <ref name="AVTExpr"/>
               </choice>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>

   <!--
      ## Data Types
   -->

   <define name="String">
      <data type="string"/>
   </define>

   <define name="Decimal">
      <data type="decimal"/>
   </define>

   <define name="Integer">
      <data type="int"/>
   </define>

   <define name="Boolean">
      <ann:documentation>One of the values "yes", "no", "true", "false", "1" or "0".</ann:documentation>
      <choice>
         <value>yes</value>
         <value>no</value>
         <value>true</value>
         <value>false</value>
         <value>1</value>
         <value>0</value>
      </choice>
   </define>

   <define name="QName">
      <ann:documentation>A QName. Unprefixed names are in the null namespace.</ann:documentation>
      <data type="Name">
         <param name="pattern">([^:\{\}]+:)?[^:\{\}]+</param>
      </data>
   </define>

   <define name="QName-default">
      <ann:documentation>A QName. Unprefixed names are in the default namespace.</ann:documentation>
      <data type="QName"/>
   </define>

   <define name="EQName">
      <ann:documentation>An EQName. Unprefixed QNames are in the null namespace.</ann:documentation>
      <choice>
         <ref name="QName"/>
         <ref name="URIQualifiedName"/>
      </choice>
   </define>

   <define name="EQName-default">
      <ann:documentation>An EQName. Unprefixed QNames are in the default namespace.</ann:documentation>
      <choice>
         <ref name="QName-default"/>
         <ref name="URIQualifiedName"/>
      </choice>
   </define>

   <define name="URIQualifiedName">
      <data type="Name">
         <param name="pattern">Q\{[^\{\}]*\}([^:\{\}]+:)?[^:\{\}]+</param>
      </data>
   </define>

   <define name="NCName">
      <data type="NCName"/>
   </define>

   <define name="Prefix">
      <data type="NCName"/>
   </define>

   <define name="URI">
      <data type="anyURI"/>
   </define>

   <define name="Version">
      <data type="decimal"/>
   </define>

   <define name="Language">
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="Visibility">
      <choice>
         <value>public</value>
         <value>private</value>
         <value>final</value>
         <value>abstract</value>
      </choice>
   </define>

   <define name="SortOrder">
      <ann:documentation>One of the values "ascending" or "descending".</ann:documentation>
      <choice>
         <value>ascending</value>
         <value>descending</value>
      </choice>
   </define>

   <define name="AVT">
      <data type="string"/>
   </define>

   <define name="AVTExpr">
      <data type="string">
         <param name="pattern">.*\{.+\}.*</param>
      </data>
   </define>

   <define name="OutputMethod">
      <choice>
         <value>xml</value>
         <value>html</value>
         <value>xhtml</value>
         <value>text</value>
         <ref name="EQName"/>
      </choice>
   </define>

   <define name="OutputVersion">
      <data type="NMTOKEN"/>
   </define>

   <define name="OutputStandalone">
      <choice>
         <ref name="Boolean"/>
         <value>omit</value>
      </choice>
   </define>

   <define name="Name">
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="Type">
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="Expression">
      <data type="string">
         <param name="minLength">1</param>
      </data>
   </define>

</grammar>