param(
   $Configuration = "Debug"
)

$ErrorActionPreference = "Stop"
Push-Location (Split-Path $script:MyInvocation.MyCommand.Path)

$singleIndent = "   "
$indent = ""

function PushIndent {
   $script:indent = $indent + $singleIndent
}

function PopIndent {
   $script:indent = $indent.Substring($singleIndent.Length)
}

function WriteLine($line = "") {
   $indent + $line
}

function IgnoreTest($file) {
   
   $readerSettings = New-Object Xml.XmlReaderSettings
   $readerSettings.IgnoreComments = $true
   $readerSettings.IgnoreWhitespace = $true

   $reader = [Xml.XmlReader]::Create($file.FullName, $readerSettings)

   try {

      while ($reader.Read() `
         -and $reader.NodeType -ne [Xml.XmlNodeType]::Element) {
         
         if ($reader.NodeType -eq [Xml.XmlNodeType]::ProcessingInstruction `
            -and $reader.LocalName -eq "ignore-test") {

            return $true
         }
      }

   } finally {
      $reader.Close()
   }

   return $false
}

function GenerateTests {

   Add-Type -Path ..\..\src\Xcst.Compiler\bin\$Configuration\Xcst.Compiler.dll

   $compilerFactory = New-Object Xcst.Compiler.XcstCompilerFactory

@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Xcst.Compiler.Tests.LanguageTestsHelper;
"@

   foreach ($subDirectory in ls -Directory) {
      GenerateTestsForDirectory $subDirectory $subDirectory.Name
   }
}

function GenerateTestsForDirectory([IO.DirectoryInfo]$directory, [string]$relativeNs) {

   $ns = "Xcst.Compiler.Tests.$relativeNs"

   foreach ($file in ls $directory.FullName *.pxcst) {

      $compiler = $compilerFactory.CreateCompiler()
      $compiler.TargetNamespace = $ns
      $compiler.NamedPackage = $true
      $compiler.IndentChars = $singleIndent

      $xcstResult = $compiler.Compile((New-Object Uri $file.FullName))

      foreach ($src in $xcstResult.CompilationUnits) {
         $src
      }
   }

   $tests = ls $directory.FullName *.xcst

   if ($tests.Length -gt 0) {

      WriteLine
      WriteLine "namespace $ns {"
      PushIndent
   
      WriteLine
      WriteLine "[TestClass]"
      WriteLine "public class $($directory.Name)Tests {"
      PushIndent

      foreach ($file in $tests) { 

         $fileName = [IO.Path]::GetFileNameWithoutExtension($file.Name)

         if ($fileName[0] -eq '_') {
            continue
         }

         $fail = $fileName -like '*.f'
         $correct = $fail -or $fileName -like '*.c'
         $testName = ($fileName -replace '[.-]', '_') -creplace '([a-z])([A-Z])', '$1_$2'

         WriteLine
         WriteLine "#line 1 ""$($file.FullName)"""
         WriteLine "[TestMethod, TestCategory(""$relativeNs"")]"

         if (!$correct) {
            WriteLine "[ExpectedException(typeof(Xcst.Compiler.CompileException))]"
         
         } elseif ($fail) {
            WriteLine "[ExpectedException(typeof(Xcst.RuntimeException))]"
         }

         if (IgnoreTest($file)) {
            WriteLine "[Ignore]"
         }

         WriteLine "public void $testName() {"
         PushIndent
         WriteLine "RunXcstTest(@""$($file.FullName)"", correct: $($correct.ToString().ToLower()), fail: $($fail.ToString().ToLower()));"
         PopIndent
         WriteLine "}"
      }

      PopIndent
      WriteLine "}"

      PopIndent
      WriteLine "}"
   }

   foreach ($subDirectory in ls $directory.FullName -Directory) {
      GenerateTestsForDirectory $subDirectory ($relativeNs + "." + $subDirectory.Name)
   }
}

try {

   GenerateTests | Out-File LanguageTests.generated.cs -Encoding utf8

} finally {
   Pop-Location
}