<#@ Template Language="C#" Debug="false" HostSpecific="true" #>
<#@ Output Extension=".generated.cs" #>
<#@ Assembly Name="System" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)src\Xcst.Compiler\bin\Debug\Xcst.Compiler.dll" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text.RegularExpressions" #>
<#@ Import Namespace="Microsoft.CSharp" #>
<#@ Import Namespace="Xcst.Compiler" #>
<#
   DirectoryInfo startDirectory = Directory.CreateDirectory(this.Host.ResolvePath(""));
   string indent = "   ";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
using static Xcst.Web.Mvc.Tests.Extension.ExtensionTestsHelper;

namespace Xcst.Web.Mvc.Tests {<# 
   PushIndent(indent);
   GenerateClass(startDirectory, indent, startDirectory.Name); 
   WriteLine("");
   PopIndent();
#>
}

<#+ void GenerateClass(DirectoryInfo directory, string indent, string fullName) { 

   var packages = directory.EnumerateFiles("*.pxcst").ToArray();

   foreach (FileInfo file in packages) {

      using (var fileStream = File.OpenRead(file.FullName)) {

         XcstCompiler compiler = new XcstCompilerFactory().CreateCompiler();
         compiler.TargetNamespace = directory.Name;
         compiler.LibraryPackage = true;

         CompileResult xcstResult = compiler.Compile(fileStream, baseUri: new Uri(file.FullName, UriKind.Absolute));

         foreach (var src in xcstResult.CompilationUnits) {
            Write(src);
         }
      }
   }

   WriteLine("");
   WriteLine("");
   Write("namespace " + directory.Name);
   Write(" {");
   PushIndent(indent);

   var tests = directory.EnumerateFiles("*.xcst").ToArray();

   if (tests.Length > 0) {

      WriteLine("");
      WriteLine("");
      WriteLine("[TestClass]");
      Write("public class ");
      Write(directory.Name + "Tests");
      Write(" {");
      PushIndent(indent);

      foreach (FileInfo file in tests) { 

         string fileName = Path.GetFileNameWithoutExtension(file.Name);

         if (fileName[0] == '_') {
            continue;
         }

         bool correct = fileName.EndsWith(".c");
         string fileName2 = fileName.Substring(0, fileName.LastIndexOf("."));
         string testName = Regex.Replace(fileName.Replace(".", "_").Replace("-", "_"), @"([a-z])([A-Z])", "$1_$2");

         WriteLine("");
         WriteLine("");
         WriteLine("#line 1 \"" + file.FullName + "\"");
         WriteLine("[TestMethod, TestCategory(\"" + fullName + "\")]");

         if (!correct) {
            WriteLine("[ExpectedException(typeof(Xcst.Compiler.CompileException))]");
         }

         Write("public void ");
         Write(testName);
         Write("() {");
         PushIndent(indent);
         WriteLine("");

         Write("var moduleType = CompileFromFile(@\"{0}\", correct: {1});", file.FullName, correct.ToString().ToLower());

         if (correct) {

            foreach (FileInfo testCase in directory.EnumerateFiles(fileName2 + ".*.xml")) {

               string testFileName = Path.GetFileNameWithoutExtension(testCase.Name);

               if (testFileName.EndsWith(".p")
                  || testFileName.EndsWith(".f")) {

                  WriteLine("");
                  Write("Is{0}(OutputEqualsToDoc(moduleType, @\"{1}\"));", testFileName.EndsWith(".p"), testCase.FullName);
               }
            }
         }

         PopIndent();
         WriteLine("");
         Write("}");
      }

      PopIndent();
      WriteLine("");
      Write("}");
   }

   foreach (DirectoryInfo subDirectory in directory.EnumerateDirectories()) {
      GenerateClass(subDirectory, indent, fullName + "." + subDirectory.Name);
   }

   PopIndent();
   WriteLine("");
   Write("}");
} #>