<#@ Template Language="C#" Debug="false" HostSpecific="true" #>
<#@ Output Extension=".generated.cs" #>
<#@ Assembly Name="System" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)src\Xcst.Compiler\bin\Debug\Xcst.Compiler.dll" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.Remoting.Messaging" #>
<#@ Import Namespace="Xcst.Compiler" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Xcst.Tests {<#

   var startDirectory = Directory.CreateDirectory(this.Host.ResolvePath(""));

   foreach (DirectoryInfo subDirectory in startDirectory.EnumerateDirectories().Where(d => !new[] { "bin", "obj", "Properties" }.Contains(d.Name))) {
      PushIndent(Indent);
      GeneratePackages(subDirectory);
      PopIndent();
   }
   
   WriteLine("");
#>
}
<#+

readonly XcstCompilerFactory compilerFactory = new XcstCompilerFactory();
const string Indent = "   ";

void GeneratePackages(DirectoryInfo directory) {

   var packages = directory.EnumerateFiles().ToArray();

   foreach (FileInfo file in packages) {

      if ((file.Extension != ".xcst"
            && file.Extension != ".pxcst")
         || file.Name[0] == '_') {
         
         continue;
      }

      bool libraryPackage = file.Extension == ".pxcst";

      using (var fileStream = File.OpenRead(file.FullName)) {

         XcstCompiler compiler = this.compilerFactory.CreateCompiler();
         compiler.TargetNamespace = directory.Name;
         compiler.LibraryPackage = libraryPackage;

         if (!libraryPackage) {
            compiler.TargetClass = Path.GetFileNameWithoutExtension(file.Name);
         }

         CompileResult xcstResult = compiler.Compile(fileStream, baseUri: new Uri(file.FullName, UriKind.Absolute));

         foreach (var src in xcstResult.CompilationUnits) {
            Write(src);
         }
      }
   }

   WriteLine("");
   WriteLine("");
   Write("namespace " + directory.Name);
   Write(" {");
   PushIndent(Indent);

   foreach (DirectoryInfo subDirectory in directory.EnumerateDirectories()) {
      GeneratePackages(subDirectory);
   }

   PopIndent();
   WriteLine("");
   Write("}");
}

#>