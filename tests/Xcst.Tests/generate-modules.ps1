$ErrorActionPreference = "Stop"
Push-Location (Split-Path $script:MyInvocation.MyCommand.Path)

$singleIndent = "   "
$indent = ""

function PushIndent {
   $script:indent = $indent + $singleIndent
}

function PopIndent {
   $script:indent = $indent.Substring($singleIndent.Length)
}

function WriteLine($line) {
   $indent + $line
}

function GenerateModules {

   Add-Type -Path ..\..\src\Xcst.Compiler\bin\Debug\Xcst.Compiler.dll

   $compilerFactory = New-Object Xcst.Compiler.XcstCompilerFactory
   $startDirectory = Get-Item .

@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xcst.Tests {
"@
   PushIndent

   foreach ($subDirectory in ls -Directory) {
      
      if ($subDirectory.Name -in "bin", "obj", "Properties") {
         continue
      }

      GenerateModulesForDirectory $subDirectory
   }

   PopIndent
   "}"
}

function GenerateModulesForDirectory([IO.DirectoryInfo]$directory) {

   foreach ($file in ls $directory.FullName) {

      if (($file.Extension -notin ".xcst", ".pxcst") `
         -or $file.Name[0] -eq '_') {

         continue
      }

      $libraryPackage = $file.Extension -eq ".pxcst"

         
      $fileStream = [IO.File]::OpenRead($file.FullName)

      try {

         $compiler = $compilerFactory.CreateCompiler()
         $compiler.TargetNamespace = $directory.Name
         $compiler.LibraryPackage = $libraryPackage
         $compiler.IndentChars = $singleIndent

         if (!$libraryPackage) {
            $compiler.TargetClass = [IO.Path]::GetFileNameWithoutExtension($file.Name)
         }

         $xcstResult = $compiler.Compile($fileStream, (New-Object Uri $file.FullName))

         foreach ($src in $xcstResult.CompilationUnits) {
            WriteLine $src
         }

      } finally {
         
         $fileStream.Dispose()
      }
   }

   WriteLine ""
   WriteLine "namespace $($directory.Name) {"
   PushIndent

   foreach ($subDirectory in ls $directory.FullName -Directory) {
      GenerateModulesForDirectory $subDirectory
   }

   PopIndent
   WriteLine "}"
}

try {

   GenerateModules | Out-File Modules.generated.cs -Encoding utf8

} finally {
   Pop-Location
}